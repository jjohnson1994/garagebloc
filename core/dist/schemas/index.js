"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LogRouteSchema = exports.SetupWallFormSchema = exports.SetupWallFormDrawing = exports.SetupWallFormHoldLayoutSchema = exports.SetupWallFormHoldLayout = exports.NewRouteFormSchema = exports.DrawingSchemaVersions = exports.yup = void 0;
const yup = require("yup");
const globals_1 = require("../globals");
exports.yup = require("yup");
exports.DrawingSchemaVersions = yup
    .number()
    .required("Required")
    .min(1)
    .max(globals_1.DrawingSchemaVersion);
exports.NewRouteFormSchema = yup
    .object({
    title: yup.string().required("Required"),
    description: yup.string(),
    grade: yup.string().oneOf(globals_1.grades).required("Required"),
    drawing: yup
        .object()
        .shape({
        schemaVersion: exports.DrawingSchemaVersions,
        holds: yup.array().of(yup.object().shape({
            id: yup.string().required().length(21),
            mirrors: yup.string().length(21),
            points: yup
                .array()
                .of(yup.array().of(yup.number().required()).length(2)),
        })
            .required()
            .noUnknown()),
    })
        .required()
        .noUnknown(),
})
    .required()
    .noUnknown();
exports.SetupWallFormHoldLayout = yup
    .string()
    .oneOf(globals_1.holdLayouts.map(({ name }) => name))
    .required("Required");
exports.SetupWallFormHoldLayoutSchema = yup
    .object()
    .shape({
    holdLayout: exports.SetupWallFormHoldLayout,
})
    .required()
    .noUnknown();
exports.SetupWallFormDrawing = yup
    .object()
    .shape({
    schemaVersion: yup
        .number()
        .required("Required")
        .oneOf([globals_1.DrawingSchemaVersion]),
    holds: yup.array().of(yup.object().shape({
        id: yup.string().required().length(21),
        mirrors: yup.string().length(21),
        points: yup
            .array()
            .of(yup.array().of(yup.number().required()).length(2)),
    })
        .required()
        .noUnknown()),
})
    .required()
    .noUnknown();
exports.SetupWallFormSchema = yup
    .object({
    holdLayout: exports.SetupWallFormHoldLayout,
    drawing: exports.SetupWallFormDrawing,
})
    .required()
    .noUnknown();
exports.LogRouteSchema = yup
    .object({
    rating: yup.number().min(0).max(3).required("Required"),
    comments: yup.string(),
    suggestedGrade: yup.string().oneOf(globals_1.grades).required("Required"),
})
    .required()
    .noUnknown();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zY2hlbWFzL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDJCQUEyQjtBQUMzQix3Q0FBdUU7QUFFdkUsNkJBQTJCO0FBRWQsUUFBQSxxQkFBcUIsR0FBRyxHQUFHO0tBQ3JDLE1BQU0sRUFBRTtLQUNSLFFBQVEsQ0FBQyxVQUFVLENBQUM7S0FDcEIsR0FBRyxDQUFDLENBQUMsQ0FBQztLQUNOLEdBQUcsQ0FBQyw4QkFBb0IsQ0FBQyxDQUFDO0FBRWhCLFFBQUEsa0JBQWtCLEdBQUcsR0FBRztLQUNsQyxNQUFNLENBQUM7SUFDTixLQUFLLEVBQUUsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUM7SUFDeEMsV0FBVyxFQUFFLEdBQUcsQ0FBQyxNQUFNLEVBQUU7SUFDekIsS0FBSyxFQUFFLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsZ0JBQU0sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUM7SUFDdEQsT0FBTyxFQUFFLEdBQUc7U0FDVCxNQUFNLEVBQUU7U0FDUixLQUFLLENBQUM7UUFDTCxhQUFhLEVBQUUsNkJBQXFCO1FBQ3BDLEtBQUssRUFBRSxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxDQUNuQixHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDO1lBQ2pCLEVBQUUsRUFBRSxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQztZQUN0QyxPQUFPLEVBQUUsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUM7WUFDaEMsTUFBTSxFQUFFLEdBQUc7aUJBQ1IsS0FBSyxFQUFFO2lCQUNQLEVBQUUsQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUN6RCxDQUFDO2FBQ0QsUUFBUSxFQUFFO2FBQ1YsU0FBUyxFQUFFLENBQ2I7S0FDRixDQUFDO1NBQ0QsUUFBUSxFQUFFO1NBQ1YsU0FBUyxFQUFFO0NBQ2YsQ0FBQztLQUNELFFBQVEsRUFBRTtLQUNWLFNBQVMsRUFBRSxDQUFDO0FBRUYsUUFBQSx1QkFBdUIsR0FBRyxHQUFHO0tBQ3ZDLE1BQU0sRUFBRTtLQUNSLEtBQUssQ0FBQyxxQkFBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQzFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUVYLFFBQUEsNkJBQTZCLEdBQUcsR0FBRztLQUM3QyxNQUFNLEVBQUU7S0FDUixLQUFLLENBQUM7SUFDTCxVQUFVLEVBQUUsK0JBQXVCO0NBQ3BDLENBQUM7S0FDRCxRQUFRLEVBQUU7S0FDVixTQUFTLEVBQUUsQ0FBQztBQUVGLFFBQUEsb0JBQW9CLEdBQUcsR0FBRztLQUNwQyxNQUFNLEVBQUU7S0FDUixLQUFLLENBQUM7SUFDTCxhQUFhLEVBQUUsR0FBRztTQUNmLE1BQU0sRUFBRTtTQUNSLFFBQVEsQ0FBQyxVQUFVLENBQUM7U0FDcEIsS0FBSyxDQUFDLENBQUMsOEJBQW9CLENBQUMsQ0FBQztJQUNoQyxLQUFLLEVBQUUsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDLEVBQUUsQ0FDbkIsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNqQixFQUFFLEVBQUUsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUM7UUFDdEMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDO1FBQ2hDLE1BQU0sRUFBRSxHQUFHO2FBQ1IsS0FBSyxFQUFFO2FBQ1AsRUFBRSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQ3pELENBQUM7U0FDRCxRQUFRLEVBQUU7U0FDVixTQUFTLEVBQUUsQ0FDYjtDQUNGLENBQUM7S0FDRCxRQUFRLEVBQUU7S0FDVixTQUFTLEVBQUUsQ0FBQztBQUVGLFFBQUEsbUJBQW1CLEdBQUcsR0FBRztLQUNuQyxNQUFNLENBQUM7SUFDTixVQUFVLEVBQUUsK0JBQXVCO0lBQ25DLE9BQU8sRUFBRSw0QkFBb0I7Q0FDOUIsQ0FBQztLQUNELFFBQVEsRUFBRTtLQUNWLFNBQVMsRUFBRSxDQUFDO0FBRUYsUUFBQSxjQUFjLEdBQUcsR0FBRztLQUM5QixNQUFNLENBQUM7SUFDTixNQUFNLEVBQUUsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQztJQUN2RCxRQUFRLEVBQUUsR0FBRyxDQUFDLE1BQU0sRUFBRTtJQUN0QixjQUFjLEVBQUUsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxnQkFBTSxDQUFDLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQztDQUNoRSxDQUFDO0tBQ0QsUUFBUSxFQUFFO0tBQ1YsU0FBUyxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyB5dXAgZnJvbSBcInl1cFwiO1xuaW1wb3J0IHsgRHJhd2luZ1NjaGVtYVZlcnNpb24sIGdyYWRlcywgaG9sZExheW91dHMgfSBmcm9tIFwiLi4vZ2xvYmFsc1wiO1xuXG5leHBvcnQgKiBhcyB5dXAgZnJvbSBcInl1cFwiO1xuXG5leHBvcnQgY29uc3QgRHJhd2luZ1NjaGVtYVZlcnNpb25zID0geXVwXG4gIC5udW1iZXIoKVxuICAucmVxdWlyZWQoXCJSZXF1aXJlZFwiKVxuICAubWluKDEpXG4gIC5tYXgoRHJhd2luZ1NjaGVtYVZlcnNpb24pO1xuXG5leHBvcnQgY29uc3QgTmV3Um91dGVGb3JtU2NoZW1hID0geXVwXG4gIC5vYmplY3Qoe1xuICAgIHRpdGxlOiB5dXAuc3RyaW5nKCkucmVxdWlyZWQoXCJSZXF1aXJlZFwiKSxcbiAgICBkZXNjcmlwdGlvbjogeXVwLnN0cmluZygpLFxuICAgIGdyYWRlOiB5dXAuc3RyaW5nKCkub25lT2YoZ3JhZGVzKS5yZXF1aXJlZChcIlJlcXVpcmVkXCIpLFxuICAgIGRyYXdpbmc6IHl1cFxuICAgICAgLm9iamVjdCgpXG4gICAgICAuc2hhcGUoe1xuICAgICAgICBzY2hlbWFWZXJzaW9uOiBEcmF3aW5nU2NoZW1hVmVyc2lvbnMsXG4gICAgICAgIGhvbGRzOiB5dXAuYXJyYXkoKS5vZihcbiAgICAgICAgICB5dXAub2JqZWN0KCkuc2hhcGUoe1xuICAgICAgICAgICAgaWQ6IHl1cC5zdHJpbmcoKS5yZXF1aXJlZCgpLmxlbmd0aCgyMSksXG4gICAgICAgICAgICBtaXJyb3JzOiB5dXAuc3RyaW5nKCkubGVuZ3RoKDIxKSxcbiAgICAgICAgICAgIHBvaW50czogeXVwXG4gICAgICAgICAgICAgIC5hcnJheSgpXG4gICAgICAgICAgICAgIC5vZih5dXAuYXJyYXkoKS5vZih5dXAubnVtYmVyKCkucmVxdWlyZWQoKSkubGVuZ3RoKDIpKSxcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5yZXF1aXJlZCgpXG4gICAgICAgICAgLm5vVW5rbm93bigpXG4gICAgICAgICksXG4gICAgICB9KVxuICAgICAgLnJlcXVpcmVkKClcbiAgICAgIC5ub1Vua25vd24oKSxcbiAgfSlcbiAgLnJlcXVpcmVkKClcbiAgLm5vVW5rbm93bigpO1xuXG5leHBvcnQgY29uc3QgU2V0dXBXYWxsRm9ybUhvbGRMYXlvdXQgPSB5dXBcbiAgLnN0cmluZygpXG4gIC5vbmVPZihob2xkTGF5b3V0cy5tYXAoKHsgbmFtZSB9KSA9PiBuYW1lKSlcbiAgLnJlcXVpcmVkKFwiUmVxdWlyZWRcIik7XG5cbmV4cG9ydCBjb25zdCBTZXR1cFdhbGxGb3JtSG9sZExheW91dFNjaGVtYSA9IHl1cFxuICAub2JqZWN0KClcbiAgLnNoYXBlKHtcbiAgICBob2xkTGF5b3V0OiBTZXR1cFdhbGxGb3JtSG9sZExheW91dCxcbiAgfSlcbiAgLnJlcXVpcmVkKClcbiAgLm5vVW5rbm93bigpO1xuXG5leHBvcnQgY29uc3QgU2V0dXBXYWxsRm9ybURyYXdpbmcgPSB5dXBcbiAgLm9iamVjdCgpXG4gIC5zaGFwZSh7XG4gICAgc2NoZW1hVmVyc2lvbjogeXVwXG4gICAgICAubnVtYmVyKClcbiAgICAgIC5yZXF1aXJlZChcIlJlcXVpcmVkXCIpXG4gICAgICAub25lT2YoW0RyYXdpbmdTY2hlbWFWZXJzaW9uXSksXG4gICAgaG9sZHM6IHl1cC5hcnJheSgpLm9mKFxuICAgICAgeXVwLm9iamVjdCgpLnNoYXBlKHtcbiAgICAgICAgaWQ6IHl1cC5zdHJpbmcoKS5yZXF1aXJlZCgpLmxlbmd0aCgyMSksXG4gICAgICAgIG1pcnJvcnM6IHl1cC5zdHJpbmcoKS5sZW5ndGgoMjEpLFxuICAgICAgICBwb2ludHM6IHl1cFxuICAgICAgICAgIC5hcnJheSgpXG4gICAgICAgICAgLm9mKHl1cC5hcnJheSgpLm9mKHl1cC5udW1iZXIoKS5yZXF1aXJlZCgpKS5sZW5ndGgoMikpLFxuICAgICAgfSlcbiAgICAgIC5yZXF1aXJlZCgpXG4gICAgICAubm9Vbmtub3duKClcbiAgICApLFxuICB9KVxuICAucmVxdWlyZWQoKVxuICAubm9Vbmtub3duKCk7XG5cbmV4cG9ydCBjb25zdCBTZXR1cFdhbGxGb3JtU2NoZW1hID0geXVwXG4gIC5vYmplY3Qoe1xuICAgIGhvbGRMYXlvdXQ6IFNldHVwV2FsbEZvcm1Ib2xkTGF5b3V0LFxuICAgIGRyYXdpbmc6IFNldHVwV2FsbEZvcm1EcmF3aW5nLFxuICB9KVxuICAucmVxdWlyZWQoKVxuICAubm9Vbmtub3duKCk7XG5cbmV4cG9ydCBjb25zdCBMb2dSb3V0ZVNjaGVtYSA9IHl1cFxuICAub2JqZWN0KHtcbiAgICByYXRpbmc6IHl1cC5udW1iZXIoKS5taW4oMCkubWF4KDMpLnJlcXVpcmVkKFwiUmVxdWlyZWRcIiksXG4gICAgY29tbWVudHM6IHl1cC5zdHJpbmcoKSxcbiAgICBzdWdnZXN0ZWRHcmFkZTogeXVwLnN0cmluZygpLm9uZU9mKGdyYWRlcykucmVxdWlyZWQoXCJSZXF1aXJlZFwiKSxcbiAgfSlcbiAgLnJlcXVpcmVkKClcbiAgLm5vVW5rbm93bigpO1xuIl19